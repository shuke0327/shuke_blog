<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BOOKNOTES]]></title>
  <link href="http://bon27.github.com/shuke_blog/atom.xml" rel="self"/>
  <link href="http://bon27.github.com/shuke_blog/"/>
  <updated>2012-12-19T20:09:59+08:00</updated>
  <id>http://bon27.github.com/shuke_blog/</id>
  <author>
    <name><![CDATA[shuke0327]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Fist Post to GitHub]]></title>
    <link href="http://bon27.github.com/shuke_blog/blog/2012/12/04/my-first-post-to-github/"/>
    <updated>2012-12-04T00:00:00+08:00</updated>
    <id>http://bon27.github.com/shuke_blog/blog/2012/12/04/my-first-post-to-github</id>
    <content type="html"><![CDATA[<h1>My Fist Post to GitHub</h1>

<p class="meta">04 Nov 2012 </p>


<p>  昨天用了接近一天的时间，去了解<a href="http://www.github.com">github</a>以及git的相关内容。在这么短的时间内，能够了解的毕竟有限，但是也足够让我喜欢上github了。除了他强大的版本控制和分支控制的哲学以外，利用github的pages做一个博客，然后用markdown语言写作，也是一件相当赞的事情。于是，接着上午对github的粗浅了解，下午就开始了折腾github pages的进程。</p>

<h2>GitHub + jekyll</h2>

<p>   在网上查了很多资料，有这几篇，给我的帮助最大：</p>

<ul>
<li>BeiYuu所写的<a href="http://beiyuu.com/github-pages/#github">使用GitHub Pages建独立博客</a></li>
<li>雁起平沙的<a href="http://yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/">GitHub Pages极简教程</a></li>
<li>阮一峰所写的<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的Blog&#8212;-github Pages和jekyll入门</a></li>
</ul>


<p>对于我这样的菜鸟而言，如果不在本地查看，而是每次都要到github网站上面查看博客效果的话，挺不方便。一来因为对于设计的感觉太差，需要经常调整，如果只能够在网络上查看，每次都要用git add + git commit + git push，特别麻烦。二来，如果连接不上网络的时候（虽然可能性较小），在本地可以继续写作，并随时查看效果，只要等到有网络了，再推送上去即可，丝毫不影响工作进程。</p>

<p>当然，如果是高手的话，可以只是安装git(在windows下可安装<a href="http://code.google.com/p/msysgit/downloads/list">mysgit</a>),而不必安装jekyll和ruby环境(ruby环境在这里只有一个作用：为jekyll提供服务)。</p>

<p>下面开始记录一下我的安装情况，很多地方都是参照上面三篇博文所做的，本文只是记录我个人的使用情形，顺便练习一下markdown语言的用法。</p>

<h2>一、创建github账号，安装github</h2>

<p>为了省事，可以在创建github之后，直接下载github提供的<a href="http://www.github.com">软件</a>.只是，似乎github软件不能够自定义安装路径。因为是挺久之前创建的账号和安装的github软件，我记不太清了。只是从我的电脑上面查看，github并没有安装在C盘或D盘的Program files 目录下。</p>

<p>接下来，就需要<em>创建公钥</em>了。以windows为例，在C:\Users\user-name.ssh文件夹中用 cd ~/.ssh进入。如果显示“No such file or directory”，则说明没有key文件，需要自己创建。</p>

<p>   如果已经存在ssh key设置（在~/.ssh文件夹中，有id_rsa 和id_rsa.pub两个文件），则需要先将其备份到key_backup文件夹中，然后将.ssh文件夹下的原文件删除。</p>

<p>   好了，现在可以生成新的SSH key文件了：
- $ ssh -keygen -t rsa -C &#8220;username@youremail.com&#8221;
- Generating public/private rsa key pair.
- Enter file in which to save the key(/Users/your_user_directory/.ssh/id_rsa):</p>

<p>按照默认的设置，按下回车确认即可，不必更改存储key文件的位置。
接下来，系统会要求你输入加密串（Passphrase）。</p>

<p>输入并确认输入之后，就成功设置了ssh key，再次查看.ssh文件夹，即可见到id_rsa（私钥）和id_rsa.pub(公钥)两个文件了。</p>

<p>之后，将id_rsa.pub用文本编辑器（vim，notepad等等均可）打开，拷贝其中全部内容。然后将SSH Key添加到GitHub上去。</p>

<p>在GitHub主页上面（登陆后），点击设置按钮，选择SSH key选项，点击add，然后将复制的内容粘贴到出现的窗体之中，点击“Add key”即可。</p>

<p>接下来，测试是否能够成功连接，输入命令：
$ ssh -T git@github.com      # git@github.com为测试的地址，不要更改</p>

<p>如果成功，会显示如下内容：</p>

<p>Hi &#8216;Your name&#8217;! You&#8217;ve successfully authenticated, but GitHub dose not provide shell access.</p>

<p>我在设置ssh key 文件的过程中，见到.ssh之中，出现了github_rsa和github_rsa.pub两个文件，但是在使用生成命令之前，没有id_rsa和id_rsa.pub两个文件。没有去理会，有可能是github软件安装的过程之中自动生成了ssh key文件。但是，这些都是可以自己替换的。我按照上面的步骤，将重新生成的id_rsa.pub中的公钥文本粘贴到github网站上面，添加了key。测试成功。至于github_rsa是怎么来的，不很清楚。</p>

<h2>设置github账号信息</h2>

<p>   在git shell 中使用命令：
$ git config &#8211;global user.name  &#8220;your names&#8221;
$ git config &#8211;global user.email &#8220;your email&#8221;</p>

<p>OK,现在github的设置已经完成。接下来就要转到<em>博客部分</em>了。</p>

<p>从我搭建博客的感觉来看，对于初学者，雁落平沙的“极简教程”是比较合适的，而如果参照阮一峰的教程，则需要对前端有较多的了解，更复杂一点，需要自己去构建符合jekyll要求的文档。</p>

<p>   github pages有两种：
- project pages，依附于项目，每个项目只能够有一个pages，建立在gh-pages分支上,创建后，访问的地址为： http://username.github.com/project；
- user pages，新建一个repo，命名为username.github.com，使用master分支。每个用户只能够建立一个，创建成功后，访问的地址为: http://username.github.com.</p>

<p>在具体的构建上面，二者大同小异，只是分支不同罢了。我选择了第二种方式创建自己的博客。</p>

<h2>创建GitHub Pages</h2>

<ul>
<li><p>创建代码库，命名为username.github.com(必须是你在github使用的用户名)</p></li>
<li><p>在线生成pages*， 进入上述仓库，点击“Admin”选项，进入。然后选择Automatic GitHub Page Generator,按照流程提示走下去，创建好页面。</p></li>
<li><p>将代码库克隆至本地：</p></li>
</ul>


<p>git clone git@github.com: username/username.github.com.git</p>

<p>删除该目录下的index.html，但不要将.git目录给删除了。</p>

<p>回到存储gitcode的主目录，创建一个other_site，cd 进入，克隆别人的代码库：
git clone git@github.com:mojombo/mojombo.github.com.git</p>

<p>下载后，将.git目录删除，把其他文件复制到自己的本地代码库username.github.com中。</p>

<p>之后，就可以根据需要配置自己的博客了。这里需要对jekyll的架构和作用有个基本的了解。</p>

<h2>jekyll的结构</h2>

<p>基本结构如下（从beiyuu的博文中copy而来）：</p>

<p>|&#8211; <em>config.yml
|&#8211; </em>includes
|&#8211; <em>layouts
|   |&#8211; default.html
|   <code>-- post.html
|-- _posts
|   |-- 2007-10-29-why-every-programmer-should-play-nethack.textile
|  </code>&#8211; 2009-04-26-barcamp-boston-4-roundup.textile
|&#8211; </em>site
`&#8211; index.html</p>

<ul>
<li><p>_config.yml为配置文件，定义了全局变量，用于设定想要得到的网站效果，语言解释器的选择等等的内容。一般只需要根据相应的文档设置好了即可。</p></li>
<li><p>includes： 文件夹，类似于编程语言源码之中的include文件夹，用来存放一些可以重用的模块，通过类似Included file &#8216;example_file.ext&#8217; not found in _includes directory的语句进行调用。可以用在模板（template）和普通的文件之中。</p></li>
<li><p>layouts: 存储模板文件的位置。一般至少需要两个模板文件：default和posts。
需要通过YAML front matter来定义，在模板文件中的标记语句，用来将数据插入到模板中来。在jekyll运行时候，会为你自动做到这些插入。</p></li>
<li><p>posts： 存储博文的文件夹。需要严格遵守这样的方式命名：2012-11-04-first-post.md。md为后缀名，也可以为textile或者html。你要做的主要工作，就是用这些标记语言写作，然后扔到这个文件夹中，不用去管文章的样式，结构，背景等等，jekyll会为你做到这些，前提是你设置好了模板。当然，也可以下载他人分享的成熟模板使用。</p></li>
<li><p><em>site: 这个文件夹由jekyll生成，包含了所有静态网站需要的东东。在github上面，当你把其他的文件上传之后，系统会为你生成</em>site文件夹，所以，你不需要将这个文件夹上传，在.gitinore中写入：<em>site即可。如果需要在其他的服务器部署网站，要做的刚好相反，只要把</em>site中的内容（不包含这个文件夹本身）上传至根目录下即可，其他的文件夹不需要上传，因为，对于不支持jekyll的服务器而言，就算你传上去也没用。</p></li>
<li><p>其他文件夹： 你可以创建任何文件夹。如果文件夹名以下划线开头（如：<em>project），文件内容不会显示。如果创建了一个project文件夹，并在其中建立了一个example.md文件，那么，可以通过 sitename.com/project/example访问。对于博客写作而言，因为需要保存草稿，可以在本地建立一个</em>draft文件夹，将稿子暂存其中，并且不上传至服务器端，等到修改完成后，拖到post文件夹中，上传即可。</p></li>
</ul>


<h2>如何配置jekyll</h2>

<p>上文说过，主要通过_config.yml文件来配置，主要关心两个内容：</p>

<p>permalink：即文章链接的形式，包含如下几个变量：<br/>
- year：文件名中的年份
- month 文件名中的月份
- day   文件名中的日期
- title 文件名中的标题
- categories 文章分类
- i-month 文件名中月份，除去前缀0 （如month = 04， i-month = 4）
- i-day   文件名中的日期，除去前缀0</p>

<p>示例的配置：<br/>
- permalink: pretty   效果： /2011/01/23/slap-top/index.html
- permalink: /:month-:day-:year/:title.html  效果：/01-23-2011/slap-top.html</p>

<p>自定义内容：<br/>
config文件中可以定义全局变量，如 title: myBlog。在文章中使用，需要用BOOKNOTES来引用。jekyll会将其替代为“myBlog”</p>

<h2>如何使用YAML Front Matter</h2>

<p>使用YAML定义格式的文章（关于YAML，可参考：<a href="http://yanping.me/cn/blog/2011/12/15/building-static-sites-with-jekyll/">用jekyll构建静态网站</a>），需要在文章开头，使用如下的格式：</p>

<hr />

<p> layout: post
 title: Blogging Like a Hacker</p>

<hr />

<p>可以使用的变量：</p>

<ul>
<li>layout： 调用_layouts文件夹下的一个模板，如上面例子中用了post模板</li>
<li>permalink：除了在_config.yml中设置了permalink之外，还可以对单独一篇文章使用特殊的永久链接</li>
<li>published：可以单独设置一篇文章是否需要发布</li>
<li>category: 设置文章的分类</li>
<li>tags: 设置文章标签</li>
</ul>


<p>基本的设置就完成了。但是要在本地预览博客，还需要安装jekyll的本地环境。</p>

<h2>搭建本地环境</h2>

<ul>
<li>下载RailInstaller并安装。</li>
<li>修改gem源：</li>
<li>gem sources -remove http://rubygems.org/</li>
<li>gem sources -a http://ruby.taobao.org/</li>
<li>用gem安装jekyll：</li>
<li>gem install jekyll</li>
<li>与jekyll配套的一些包也会自动安装。</li>
<li>如果要用rdiscount或kramdown来解析markdown语言，也需要用如下的命令安装</li>
<li><p>gem install rdiscount kramdown
在_config.yml中设置：mardown: rdiscount 就可以使用rdiscount进行解析。</p>

<p>  当当当当。。。。本地环境搭建完成。cd 到博客的根目录中，然后使用命令：
  $ jekyll &#8211;server</p></li>
</ul>


<p> 就可以通过localhost:4000来访问了。</p>

<h2>关于中文字符的问题</h2>

<p>我完成上面的步骤之后，还遇到一个问题：
打开localhost:4000之后，中文文章出现乱码，但是其它一切正常。应该是模板中符号集设置不当造成的。我直接用了一个英文博客的模板，而没有做修改。那么，如何设置，使其正常工作呢？</p>

<p>是在设置文件_config.yml中改动，还是要在模板文件default.html和post.html中改动？</p>

<p>（问题已经解决。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Makes A Good Article]]></title>
    <link href="http://bon27.github.com/shuke_blog/blog/2012/11/07/what-makes-a-good-article/"/>
    <updated>2012-11-07T00:00:00+08:00</updated>
    <id>http://bon27.github.com/shuke_blog/blog/2012/11/07/what-makes-a-good-article</id>
    <content type="html"><![CDATA[<h1>什么是一篇好文章？</h1>

<hr />

<h2>文章的用词</h2>

<p>文章的基本组成单位是单词，或者是词语，即能够拆解为的最小的有意义的单位。要写好一篇文章，先要将最基础的单词选择好。《动物庄园》作者奥威尔有一篇文章<a href="http://www.owell.com" title="奥威尔论写作">文章的写作</a>，专门讲到应该如何写作的问题。其中涉及文章选词，重要的有这几点：</p>

<blockquote><p>尽可能使用积极语态，而非消极语态。
避免使用意义不明确的单词。
尽量选择简洁明了的单词，而非复杂难懂的单词。
避免使用陈词滥调。中文写作中，比如打好……的战争之类的烂词。
其他：暂时忘记了，稍后补充。</p></blockquote>

<p>在[《风格的要素》][elements]一书中，W.B.也针对英文写作提出了用词上面要注意的一些地方，相比奥威尔的文章，增加了这几条：</p>

<blockquote><p>有待补充。
有待补充。
有待补充。</p></blockquote>

<p>良好的选词，不仅能够帮助读者明白文章的内容，也有助于写作者自己理清楚思路，避免下意识的用一些大词或者所谓的复杂词汇糊弄过关，而无助于文章意思的清晰。这对于一个诚实的写作者而言，尤其重要。他的目的是向向读者展示自己的想法，并尽可能的帮助他们理解，而不是相反。</p>

<h2>文章的语句</h2>

<p>这一部分需要&#8221;Building great sentences&#8221;的支撑。
就单个句子而言，好的风格是一个句子只表达一个意思，并且尽能表达完整。如果不能够做到，或者其代价是句子变得冗长，就要考虑将这个长句断开，用一个句群来表达一个意思。（这和coding中的规则是一致的）</p>

<h2>写作和编程之间的关系</h2>

<p>二者是同胞兄弟。写作的风格要求，也可以相应的在编程风格要求之中得到体现。</p>

<h2>关于这篇文章</h2>

<p>这篇文章不是一天能够写完的。因为我的脑袋里所积累的知识实在有限。但总有一天要写完，不能成为烂尾。我计划将github上面的两个博客分开，一个专门发布有关编程的文章<a href="http://bon27.github.com">http://bon27.github.com</a>,另一个博客则记录写作、评论、书评之类的文字<a href="http://bon27.github.com/shuke_blog">http://bon27.github.com/shuke_blog</a>，这样可以做到风格相对统一。但凡涉及到两者交叉的部分（如，计算投资学部分的内容），就发布到编程的主博客中。副博客作为消遣用，写一些私人化的文章，记录学习的过程，相对而言更文艺一点。
用writemonkey写作的感觉真是不错。以后就这么办了。每天早上早饭之前的时间用来写作，专注于一个主题，先将编程的东东完全抛开不管，专心写作。</p>
]]></content>
  </entry>
  
</feed>
